// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "go-feedmaker/entity"

	mock "github.com/stretchr/testify/mock"
)

// GenerationRepo is an autogenerated mock type for the GenerationRepo type
type GenerationRepo struct {
	mock.Mock
}

// IsAllowedType provides a mock function with given fields: ctx, generationType
func (_m *GenerationRepo) IsAllowedType(ctx context.Context, generationType string) (bool, error) {
	ret := _m.Called(ctx, generationType)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, generationType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, generationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *GenerationRepo) List(ctx context.Context) ([]*entity.Generation, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Generation
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Generation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Generation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllowedTypes provides a mock function with given fields: ctx
func (_m *GenerationRepo) ListAllowedTypes(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, generation
func (_m *GenerationRepo) Store(ctx context.Context, generation *entity.Generation) error {
	ret := _m.Called(ctx, generation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Generation) error); ok {
		r0 = rf(ctx, generation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
